<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on 张豪blog</title>
    <link>https://zh1014.github.io/categories/go/</link>
    <description>Recent content in go on 张豪blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 28 Mar 2019 18:07:13 +0800</lastBuildDate>
    
	<atom:link href="https://zh1014.github.io/categories/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>go出现compile: version does not match go tool version</title>
      <link>https://zh1014.github.io/post/2019/3/go%E5%87%BA%E7%8E%B0compile-version-does-not-match-go-tool-version-/</link>
      <pubDate>Thu, 28 Mar 2019 18:07:13 +0800</pubDate>
      
      <guid>https://zh1014.github.io/post/2019/3/go%E5%87%BA%E7%8E%B0compile-version-does-not-match-go-tool-version-/</guid>
      <description>报错： compile: version &amp;ldquo;&amp;rdquo; does not match go tool version &amp;ldquo;&amp;rdquo; 出现在用brew升级了go，没有修改GOROOT。 例如1.11.2升级为1.11.4，GOROOT仍然为/usr/</description>
    </item>
    
    <item>
      <title>Go的database/sql包使用笔记</title>
      <link>https://zh1014.github.io/post/2018/10/go%E7%9A%84sql%E5%8C%85%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 30 Oct 2018 00:00:36 +0800</pubDate>
      
      <guid>https://zh1014.github.io/post/2018/10/go%E7%9A%84sql%E5%8C%85%E4%BD%BF%E7%94%A8/</guid>
      <description>连接 sql.Open()连接数据库时，dsn中dbname为空，不会出现错误；dbname为不存在数据库，进行查询时才会panic，（unk</description>
    </item>
    
    <item>
      <title>Go的interface{}笔记</title>
      <link>https://zh1014.github.io/post/2018/10/go%E7%9A%84interface%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 29 Oct 2018 19:19:19 +0800</pubDate>
      
      <guid>https://zh1014.github.io/post/2018/10/go%E7%9A%84interface%E7%AC%94%E8%AE%B0/</guid>
      <description>interface{}组成 interface{}由两部分组成：动态类型+实际值。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 func main() { var sp *string var i interface{} i = sp println(sp == nil)</description>
    </item>
    
    <item>
      <title>Go中的反引号、单引号与双引号</title>
      <link>https://zh1014.github.io/post/2018/10/go%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%BC%95%E5%8F%B7%E5%8D%95%E5%BC%95%E5%8F%B7%E4%B8%8E%E5%8F%8C%E5%BC%95%E5%8F%B7/</link>
      <pubDate>Mon, 29 Oct 2018 19:10:55 +0800</pubDate>
      
      <guid>https://zh1014.github.io/post/2018/10/go%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%BC%95%E5%8F%B7%E5%8D%95%E5%BC%95%E5%8F%B7%E4%B8%8E%E5%8F%8C%E5%BC%95%E5%8F%B7/</guid>
      <description>单引号一般用来表示一个字符，表示字符串一般不用。比如&amp;rsquo;a&amp;rsquo;,&amp;lsquo;b&amp;rsquo;。有点像表示char 反引号</description>
    </item>
    
    <item>
      <title>Go类型断言与.(type)的区别</title>
      <link>https://zh1014.github.io/post/2018/10/go%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80%E4%B8%8E.type%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Mon, 29 Oct 2018 19:04:00 +0800</pubDate>
      
      <guid>https://zh1014.github.io/post/2018/10/go%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80%E4%B8%8E.type%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>类型断言 1 2 3 4 5 6 7 8 9 10 11 // 当断言正确，效果相当于直接赋值 func main() { var i interface{} = &amp;#34;hello&amp;#34; s, _ := i.(string) println(s) fmt.Println(reflect.TypeOf(s)) } 输出： hello string 1 2 3 4 5 6 7 8 9 10 11 // 当断言不正确，</description>
    </item>
    
    <item>
      <title>Go使用form Data格式接数据</title>
      <link>https://zh1014.github.io/post/2018/10/go%E4%BD%BF%E7%94%A8form-data%E6%A0%BC%E5%BC%8F%E6%8E%A5%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Sun, 28 Oct 2018 15:56:25 +0800</pubDate>
      
      <guid>https://zh1014.github.io/post/2018/10/go%E4%BD%BF%E7%94%A8form-data%E6%A0%BC%E5%BC%8F%E6%8E%A5%E6%95%B0%E6%8D%AE/</guid>
      <description>go使用multipart/form-data接受请求数据遇到的问题 http使用multipart/form-data类型传输数据，需要go</description>
    </item>
    
  </channel>
</rss>